import mysql.connector  # Import the connection module
import DBConnUtil # Import the connection module

def execute_query(query, params=None):
    connection = None  # Initialize connection variable
    try:
        connection = DBConnUtil.connect_to_mysql()  # Call the connection function
        if connection:
            # Create a cursor object to execute SQL queries
            mycursor = connection.cursor()

            # Execute the query with optional parameters
            if params:
                mycursor.execute(query, params)
            else:
                mycursor.execute(query)

            # Fetch and return the result
            result = mycursor.fetchall()

            # Close the cursor and commit the transaction
            mycursor.close()
            connection.commit()

            return result
        else:
            print("Connection failed.")
            return None
    except Exception as e:
        print("Error executing query:", e)
        return None
    finally:
        if connection:
            connection.close()

# Task 3: GroupBy, Aggregate Functions, Having, Order By, where

# Query 14: Find the total number of couriers handled by each employee.
query14 = """
SELECT EmployeeID, Name, COUNT(CourierID) AS TotalCouriersHandled
FROM courier_management_system.employee
LEFT JOIN Courier c ON EmployeeID = EmployeeID
GROUP BY EmployeeID, Name;
"""

results14 = execute_query(query14)
if results14:
    print("14. Total number of couriers handled by each employee:")
    for result in results14:
        print(result)

# Query 15: Calculate the total revenue generated by each location
query15 = """
SELECT l.LocationID, l.LocationName, SUM(p.Amount) AS TotalRevenue
FROM Location l
LEFT JOIN Payment p ON l.LocationID = p.LocationID
GROUP BY l.LocationID, l.LocationName;
"""

results15 = execute_query(query15)
if results15:
    print("\n15. Total revenue generated by each location:")
    for result in results15:
        print(result)

# Query 16: Find the total number of couriers delivered to each location.
query16 = """
SELECT l.LocationID, l.LocationName, COUNT(c.CourierID) AS TotalCouriersDelivered
FROM Location l
LEFT JOIN Orders o ON l.LocationID = LocationID
LEFT JOIN Courier c ON o.OrderID = OrderID
WHERE c.Status = 'Delivered'
GROUP BY l.LocationID, l.LocationName;
"""

results16 = execute_query(query16)
if results16:
    print("\n16. Total number of couriers delivered to each location:")
    for result in results16:
        print(result)

# Query 17: Find the courier with the highest average delivery time:
query17 = """
SELECT c.CourierID, AVG(DATEDIFF(p.DeliveryDate, o.OrderDate)) AS AvgDeliveryTime
FROM Courier c
JOIN Parcels p ON c.CourierID = p.CourierID
JOIN Orders o ON p.OrderID = o.OrderID
GROUP BY c.CourierID
ORDER BY AvgDeliveryTime DESC
LIMIT 1;
"""

results17 = execute_query(query17)
if results17:
    print("\n17. Courier with the highest average delivery time:")
    for result in results17:
        print(result)

# Query 18: Find Locations with Total Payments Less Than a Certain Amount
query18 = """
SELECT l.LocationID, l.LocationName, SUM(p.Amount) AS TotalPayments
FROM Location l
LEFT JOIN Payment p ON l.LocationID = p.LocationID
GROUP BY l.LocationID, l.LocationName
HAVING TotalPayments < 200;
"""

results18 = execute_query(query18)
if results18:
    print("\n18. Locations with total payments less than a certain amount:")
    for result in results18:
        print(result)

# Query 19: Calculate Total Payments per Location
query19 = """
SELECT LocationID, LocationName, SUM(Amount) AS TotalPayments
FROM Payment
GROUP BY LocationID, LocationName;
"""

results19 = execute_query(query19)
if results19:
    print("\n19. Total payments per location:")
    for result in results19:
        print(result)

# Query 20: Retrieve couriers who have received payments totaling more than $50 in a specific location (LocationID = X):
query20 = """
SELECT c.CourierID, c.SenderName, p.LocationName
FROM Courier c
JOIN Payment p ON c.CourierID = p.CourierID
WHERE p.LocationID = 2
GROUP BY c.CourierID, c.SenderName, p.LocationName
HAVING SUM(p.Amount) > 50;
"""

results20 = execute_query(query20)
if results20:
    print("\n20. Couriers who received payments totaling more than $50 in a specific location:")
    for result in results20:
        print(result)

# Query 21: Retrieve couriers who have received payments totaling more than $50 after a certain date (PaymentDate > 'YYYY-MM-DD'):
query21 = """
SELECT c.CourierID, c.SenderName
FROM Courier c
JOIN Payment p ON c.CourierID = p.CourierID
WHERE p.PaymentDate > '2024-04-04'
GROUP BY c.CourierID, c.SenderName
HAVING SUM(p.Amount) > 50;
"""

results21 = execute_query(query21)
if results21:
    print("\n21. Couriers who received payments totaling more than $50 after a certain date:")
    for result in results21:
        print(result)

# Query 22: Retrieve locations where the total amount received is more than $50 before a certain date (PaymentDate > 'YYYY-MM-DD')
query22 = """
SELECT l.LocationID, l.LocationName
FROM Location l
JOIN Payment p ON l.LocationID = p.LocationID
WHERE p.PaymentDate < '2024-04-15'
GROUP BY l.LocationID, l.LocationName
HAVING SUM(p.Amount) > 50;
"""

results22 = execute_query(query22)
if results22:
    print("\n22. Locations where the total amount received is more than $50 before a certain date:")
    for result in results22:
        print(result)
